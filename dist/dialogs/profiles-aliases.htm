<div class="mb-3">
    <label for="pattern" class="form-label" style="width: 100%">Name
        <div class="float-end form-check form-switch">
            <input type="checkbox" class="form-check-input" id="enabled">
            <label class="form-check-label" for="enabled">Enabled</label>
        </div>

    </label>
    <input class="form-control" id="pattern">
</div>

<div class="mb-3 profile-value">
    <div class="mb-2 d-flex align-items-center">
        <label class="form-label align-self-baseline me-2 flex-grow-1" for="value">Value</label>
        <label class="form-label align-self-baseline me-2" for="style">Style</label>
        <select class="form-select align-self-baseline" id="style" style="width: auto;display: inline-block;">
            <option value="0">Text</option>
            <option value="1">Parse</option>
            <option value="2">Script</option>
        </select>
    </div>
    <button id="btn-value-expand" class="btn-sm float-start btn btn-outline-secondary" style="right: 10px;top: 56px;"
        title="Expand to fill panel"><i class="bi bi-chevron-expand"></i></button>
    <textarea class="form-control profile-editor" id="value" rows="6" wrap="soft" required></textarea>
</div>

<div class="accordion" id="itemAccordion">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                data-bs-target="#advanced" aria-expanded="false" aria-controls="advanced">
                Advanced
            </button>
        </h2>
        <div id="advanced" class="accordion-collapse collapse" data-bs-parent="#itemAccordion">
            <div class="accordion-body">
                <div class="mb-3">
                    <label class="form-label" for="params">Params</label>
                    <input class="form-control" id="params">
                </div>
                <div class="mb-3">
                    <label class="form-label" for="priority">Priority</label>
                    <input type="number" class="form-control" id="priority">
                </div>
                <div class="form-check form-switch form-check-inline">
                    <input type="checkbox" class="form-check-input" id="append">
                    <label class="form-check-label" for="append">Append</label>
                </div>
                <div class="form-check form-switch form-check-inline">
                    <input type="checkbox" class="form-check-input" id="multi">
                    <label class="form-check-label" for="multi">Multi</label>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    const valueEd = body.querySelector('.profile-value');
    if (valueEd.dataset.expanded === 'true')
        body.querySelector('#btn-value-expand').click();
    let editor;
    body.querySelector('#btn-value-expand').addEventListener('click', () => {
        if (valueEd.dataset.expanded === 'true') {
            body.querySelector('#btn-value-expand i').classList.add('bi-chevron-expand');
            body.querySelector('#btn-value-expand i').classList.remove('bi-chevron-contract');
            valueEd.dataset.expanded = 'false';
            valueEd.classList.remove('d-flex', 'flex-column', 'profile-value-expanded');
            valueEd.classList.add('mb-3');
            body.querySelector('#value').style.resize = '';
            body.querySelector('#value').style.maxHeight = '';
            body.querySelector('#value').classList.remove('flex-grow-1');
            if (body.querySelector('#value-editor'))
                body.querySelector('#value-editor').classList.remove('flex-grow-1');
        }
        else {
            body.querySelector('#btn-value-expand i').classList.remove('bi-chevron-expand');
            body.querySelector('#btn-value-expand i').classList.add('bi-chevron-contract');
            valueEd.dataset.expanded = 'true';
            valueEd.classList.add('profile-value-expanded', 'd-flex', 'flex-column');
            valueEd.classList.remove('mb-3');
            body.querySelector('#value').style.resize = 'none';
            body.querySelector('#value').style.maxHeight = 'unset';
            body.querySelector('#value').classList.add('flex-grow-1');
            if (body.querySelector('#value-editor'))
                body.querySelector('#value-editor').classList.add('flex-grow-1');
        }
    });
    let contentChanging = () => {
        client.off('options-loaded', optionsLoaded);
        dialog.off('content-changing', contentChanging);
        dialog.off('item-loaded', itemLoaded);
        if (editor)
            editor.destroy();
    };
    let itemLoaded = e => {
        if (valueEd.dataset.expanded === 'true')
            body.querySelector('#btn-value-expand').click();
        if (editor) {
            editor.value = body.querySelector('#value').value || '';
            if (body.querySelector('#style').value === '2')
                editor.setLanguage('javascript');
            else if (body.querySelector('#style').value === '1')
                editor.setLanguage('oiMUD');
            else
                editor.setLanguage();
        }
    };
    dialog.on('content-changing', contentChanging);
    dialog.on('item-loaded', itemLoaded);
    function createEditor() {
        if (ace && client.getOption('profiles.codeEditor')) {
            editor = new CodeEditor(body.querySelector('#value'), {
                inline: client.getOption('enableInlineComments'),
                block: client.getOption('enableBlockComments'),
                inlineStr: client.getOption('inlineCommentString').split(''),
                blockStr: client.getOption('blockCommentString').split(''),
                parameter: client.getOption('parametersChar'),
                nParameter: client.getOption('nParametersChar'),
                command: client.getOption('commandChar'),
                stacking: client.getOption('commandStackingChar'),
                speed: client.getOption('speedpathsChar'),
                verbatim: client.getOption('verbatimChar')
            });
            body.querySelector('#style').addEventListener('change', () => {
                if (body.querySelector('#style').value === '2')
                    editor.setLanguage('javascript');
                else if (body.querySelector('#style').value === '1')
                    editor.setLanguage('oiMUD');
                else
                    editor.setLanguage();
            });
            if (body.querySelector('#style').value === '2')
                editor.setLanguage('javascript');
            else if (body.querySelector('#style').value === '1')
                editor.setLanguage('oiMUD');
            else
                editor.setLanguage();
        }
    }
    createEditor();
    let optionsLoaded = () => {
        if (editor) {
            if (!client.getOption('profiles.codeEditor')) {
                editor.destroy();
                editor = null;
            }
            else
                editor.options = {
                    inline: client.getOption('enableInlineComments'),
                    block: client.getOption('enableBlockComments'),
                    inlineStr: client.getOption('inlineCommentString').split(''),
                    blockStr: client.getOption('blockCommentString').split(''),
                    parameter: client.getOption('parametersChar'),
                    nParameter: client.getOption('nParametersChar'),
                    command: client.getOption('commandChar'),
                    stacking: client.getOption('commandStackingChar'),
                    speed: client.getOption('speedpathsChar'),
                    verbatim: client.getOption('verbatimChar')
                };
        }
        else
            createEditor();
    };
    client.on('options-loaded', optionsLoaded);
</script>